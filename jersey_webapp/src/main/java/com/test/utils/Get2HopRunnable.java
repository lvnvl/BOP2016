package com.test.utils;

import java.util.HashSet;
import java.util.Iterator;

import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.slf4j.LoggerFactory;

public class Get2HopRunnable implements Runnable{
	
	private long a;
	private long b;
	private boolean aIsID;
	private boolean bIsID;
	private HashSet<Long> idHashSet;
	private boolean fromA;
	private boolean first;
	public JSONArray jsonArray;

	private Iterator<Long> iterator;
	private PathFinder pathFinder;
	
	/**
	 * @param hs  idSet
	 * @param al  a
	 * @param bl  b
	 * @param froma froma means idset is generated by a
	 * @param f   是否是第一次调用，针对Acase find (1,1,1) 的优化
	 * @param p    pathfinder
	 * @param abool   a is Id ?
	 * @param bbool   b is Id ?
	 */
	public Get2HopRunnable(HashSet<Long> hs,long al,long bl,boolean froma,boolean f,PathFinder p,boolean abool,boolean bbool) {
		// TODO Auto-generated constructor stub
		idHashSet = hs;
		iterator = idHashSet.iterator();
		a = al;
		b = bl;
		first = f;
		fromA = froma;
		aIsID = abool;
		bIsID = bbool;
		pathFinder = p;
		jsonArray = new JSONArray();
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
//		while((System.currentTimeMillis() - pathFinder.startTime) < 290000){
		int i = 0;
			while (iterator.hasNext()) {
				i ++ ;
				JSONArray temp2Hop = new JSONArray();
				if(fromA){
					temp2Hop = pathFinder.get2HopPaths(iterator.next().longValue(),b,first,aIsID,bIsID);
					if(temp2Hop != null && temp2Hop.length() != 0){
						for(int j = 0;j < temp2Hop.length();j++){
							JSONArray tpArray = new JSONArray();
							tpArray.put(a);
							try {
								tpArray.put(temp2Hop.getJSONArray(j).getLong(0));
								tpArray.put(temp2Hop.getJSONArray(j).getLong(1));
								tpArray.put(temp2Hop.getJSONArray(j).getLong(2));
							} catch (JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							jsonArray.put(tpArray);
						}
					}
				}else{
					temp2Hop = pathFinder.get2HopPaths(a,iterator.next().longValue(),first,aIsID,bIsID);
					if(temp2Hop != null && temp2Hop.length() != 0){
						for(int j = 0;j < temp2Hop.length();j++){
							JSONArray tpArray = new JSONArray();
							try {
								tpArray.put(temp2Hop.getJSONArray(j).getLong(0));
								tpArray.put(temp2Hop.getJSONArray(j).getLong(1));
								tpArray.put(temp2Hop.getJSONArray(j).getLong(2));
							} catch (JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							tpArray.put(b);
							jsonArray.put(tpArray);
						}
					}
				}
			}
			LoggerFactory.getLogger(getClass()).info("线程"+ Thread.currentThread().getId() +"执行完毕，time consumed :"
			+ (System.currentTimeMillis() - pathFinder.startTime) +"ms.  i=" + i);
//		}
	}
}
